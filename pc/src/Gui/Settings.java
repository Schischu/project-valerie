/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Settings.java
 *
 * Created on 24.08.2009, 21:38:40
 */

package Gui;

import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import valerie.controller.ConfPaths;
import valerie.controller.Controller;
import valerie.controller.Notification;
import valerie.tools.BoxInfo;
import valerie.tools.Path;
import valerie.tools.Path.eContains;

/**
 *
 * @author Admin
 */
public class Settings extends javax.swing.JDialog {

    Controller pController;

    /** Creates new form Settings */
    public Settings(java.awt.Frame parent, boolean modal, Controller controller) {
        super(parent, modal);
        initComponents();

        pController = controller;

        for (int i = 0; i < jTree1  .getRowCount(); i++) {
            jTree1.expandRow(i);
        }

        jPanelGeneral.setVisible(true);
        jPanelConvert.setVisible(false);
        jPanelFileManagment.setVisible(false);
        jPanelImportManagment.setVisible(false);

        jLabelHeading.setText("General");
        jTree1ValueChanged(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jSplitPaneApplyCancel = new javax.swing.JSplitPane();
        jButtonApply = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jSplitPaneTree = new javax.swing.JSplitPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLayeredPaneSettings = new javax.swing.JLayeredPane();
        jPanelGeneral = new javax.swing.JPanel();
        jCheckBoxUpdate = new javax.swing.JCheckBox();
        jCheckBoxLoadArchiv = new javax.swing.JCheckBox();
        jComboBoxBoxes = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jButtonBoxesSearch = new javax.swing.JButton();
        jButtonBoxesCreate = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldBoxesManufactor = new javax.swing.JTextField();
        jTextFieldBoxesModell = new javax.swing.JTextField();
        jTextFieldBoxesIp = new javax.swing.JTextField();
        jButtonBoxesSave = new javax.swing.JButton();
        jPanelFileManagment = new javax.swing.JPanel();
        jTextFieldFilter = new javax.swing.JTextField();
        jLabelFilter = new javax.swing.JLabel();
        jPanelImportManagment = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableImportManagment = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanelConvert = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxEncoder = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxResolution = new javax.swing.JComboBox();
        jComboBoxResize = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabelHeading = new javax.swing.JLabel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(valerie.ValerieApp.class).getContext().getResourceMap(Settings.class);
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                SettingShow(evt);
            }
        });

        jSplitPaneApplyCancel.setBorder(null);
        jSplitPaneApplyCancel.setDividerSize(0);
        jSplitPaneApplyCancel.setName("jSplitPaneApplyCancel"); // NOI18N

        jButtonApply.setText(resourceMap.getString("jButtonApply.text")); // NOI18N
        jButtonApply.setName("jButtonApply"); // NOI18N
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });
        jSplitPaneApplyCancel.setLeftComponent(jButtonApply);

        jButtonCancel.setText(resourceMap.getString("jButtonCancel.text")); // NOI18N
        jButtonCancel.setName("jButtonCancel"); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        jSplitPaneApplyCancel.setRightComponent(jButtonCancel);

        jSplitPaneTree.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jSplitPaneTree.setDividerSize(1);
        jSplitPaneTree.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPaneTree.setMinimumSize(new java.awt.Dimension(215, 45));
        jSplitPaneTree.setName("jSplitPaneTree"); // NOI18N
        jSplitPaneTree.setPreferredSize(new java.awt.Dimension(215, 45));

        jLabel1.setBackground(resourceMap.getColor("jLabel1.background")); // NOI18N
        jLabel1.setFont(new java.awt.Font("Arial", 1, 24));
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setMaximumSize(new java.awt.Dimension(215, 45));
        jLabel1.setMinimumSize(new java.awt.Dimension(215, 45));
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setOpaque(true);
        jLabel1.setPreferredSize(new java.awt.Dimension(215, 45));
        jSplitPaneTree.setTopComponent(jLabel1);

        jScrollPane1.setBackground(resourceMap.getColor("jScrollPane1.background")); // NOI18N
        jScrollPane1.setBorder(null);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTree1.setBackground(resourceMap.getColor("jTree1.background")); // NOI18N
        jTree1.setFont(resourceMap.getFont("jTree1.font")); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("General");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("File Management");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Movies");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Import Management");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setLargeModel(true);
        jTree1.setName("jTree1"); // NOI18N
        jTree1.setRootVisible(false);
        jTree1.setRowHeight(30);
        jTree1.setShowsRootHandles(true);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jSplitPaneTree.setRightComponent(jScrollPane1);

        jLayeredPaneSettings.setBackground(resourceMap.getColor("jLayeredPaneSettings.background")); // NOI18N
        jLayeredPaneSettings.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLayeredPaneSettings.setName("jLayeredPaneSettings"); // NOI18N
        jLayeredPaneSettings.setOpaque(true);

        jPanelGeneral.setName("jPanelGeneral"); // NOI18N
        jPanelGeneral.setOpaque(false);

        jCheckBoxUpdate.setText(resourceMap.getString("jCheckBoxUpdate.text")); // NOI18N
        jCheckBoxUpdate.setName("jCheckBoxUpdate"); // NOI18N
        jCheckBoxUpdate.setOpaque(false);

        jCheckBoxLoadArchiv.setText(resourceMap.getString("jCheckBoxLoadArchiv.text")); // NOI18N
        jCheckBoxLoadArchiv.setEnabled(false);
        jCheckBoxLoadArchiv.setName("jCheckBoxLoadArchiv"); // NOI18N

        jComboBoxBoxes.setName("jComboBoxBoxes"); // NOI18N
        jComboBoxBoxes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxBoxesItemStateChanged(evt);
            }
        });

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(valerie.ValerieApp.class).getContext().getActionMap(Settings.class, this);
        jButtonBoxesSearch.setAction(actionMap.get("ActionSearchForBoxes")); // NOI18N
        jButtonBoxesSearch.setIcon(resourceMap.getIcon("jButtonBoxesSearch.icon")); // NOI18N
        jButtonBoxesSearch.setText(resourceMap.getString("jButtonBoxesSearch.text")); // NOI18N
        jButtonBoxesSearch.setToolTipText(resourceMap.getString("jButtonBoxesSearch.toolTipText")); // NOI18N
        jButtonBoxesSearch.setName("jButtonBoxesSearch"); // NOI18N
        jButtonBoxesSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBoxesSearchActionPerformed(evt);
            }
        });

        jButtonBoxesCreate.setText(resourceMap.getString("jButtonBoxesCreate.text")); // NOI18N
        jButtonBoxesCreate.setName("jButtonBoxesCreate"); // NOI18N
        jButtonBoxesCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBoxesCreateActionPerformed(evt);
            }
        });

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jTextFieldBoxesManufactor.setText(resourceMap.getString("jTextFieldBoxesManufactor.text")); // NOI18N
        jTextFieldBoxesManufactor.setEnabled(false);
        jTextFieldBoxesManufactor.setName("jTextFieldBoxesManufactor"); // NOI18N

        jTextFieldBoxesModell.setText(resourceMap.getString("jTextFieldBoxesModell.text")); // NOI18N
        jTextFieldBoxesModell.setEnabled(false);
        jTextFieldBoxesModell.setName("jTextFieldBoxesModell"); // NOI18N

        jTextFieldBoxesIp.setText(resourceMap.getString("jTextFieldBoxesIp.text")); // NOI18N
        jTextFieldBoxesIp.setEnabled(false);
        jTextFieldBoxesIp.setName("jTextFieldBoxesIp"); // NOI18N

        jButtonBoxesSave.setText(resourceMap.getString("jButtonBoxesSave.text")); // NOI18N
        jButtonBoxesSave.setEnabled(false);
        jButtonBoxesSave.setName("jButtonBoxesSave"); // NOI18N
        jButtonBoxesSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBoxesSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGeneralLayout = new javax.swing.GroupLayout(jPanelGeneral);
        jPanelGeneral.setLayout(jPanelGeneralLayout);
        jPanelGeneralLayout.setHorizontalGroup(
            jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxUpdate)
                    .addComponent(jCheckBoxLoadArchiv)
                    .addComponent(jLabel5)
                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                                .addComponent(jComboBoxBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBoxesSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBoxesCreate))
                            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextFieldBoxesManufactor, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                            .addComponent(jTextFieldBoxesModell)
                                            .addComponent(jTextFieldBoxesIp)))
                                    .addComponent(jButtonBoxesSave))))))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        jPanelGeneralLayout.setVerticalGroup(
            jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCheckBoxUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxLoadArchiv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonBoxesSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldBoxesManufactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextFieldBoxesModell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextFieldBoxesIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBoxesSave))
                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jButtonBoxesCreate)))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jPanelGeneral.setBounds(10, 70, 510, 280);
        jLayeredPaneSettings.add(jPanelGeneral, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanelFileManagment.setName("jPanelFileManagment"); // NOI18N
        jPanelFileManagment.setOpaque(false);

        jTextFieldFilter.setText(resourceMap.getString("jTextFieldFilter.text")); // NOI18N
        jTextFieldFilter.setName("jTextFieldFilter"); // NOI18N

        jLabelFilter.setText(resourceMap.getString("jLabelFilter.text")); // NOI18N
        jLabelFilter.setName("jLabelFilter"); // NOI18N

        javax.swing.GroupLayout jPanelFileManagmentLayout = new javax.swing.GroupLayout(jPanelFileManagment);
        jPanelFileManagment.setLayout(jPanelFileManagmentLayout);
        jPanelFileManagmentLayout.setHorizontalGroup(
            jPanelFileManagmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFileManagmentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelFileManagmentLayout.setVerticalGroup(
            jPanelFileManagmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFileManagmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFileManagmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFilter)
                    .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(249, Short.MAX_VALUE))
        );

        jPanelFileManagment.setBounds(10, 70, 510, 280);
        jLayeredPaneSettings.add(jPanelFileManagment, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanelImportManagment.setBackground(resourceMap.getColor("jPanelImportManagment.background")); // NOI18N
        jPanelImportManagment.setName("jPanelImportManagment"); // NOI18N
        jPanelImportManagment.setOpaque(false);

        jScrollPane2.setBackground(resourceMap.getColor("jScrollPane2.background")); // NOI18N
        jScrollPane2.setName("jScrollPane2"); // NOI18N
        jScrollPane2.setOpaque(false);

        jTableImportManagment.setAutoCreateRowSorter(true);
        jTableImportManagment.setBackground(resourceMap.getColor("jTableImportManagment.background")); // NOI18N
        jTableImportManagment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Path", "Contains"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableImportManagment.setName("jTableImportManagment"); // NOI18N
        jTableImportManagment.setOpaque(false);
        jScrollPane2.setViewportView(jTableImportManagment);
        jTableImportManagment.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTableImportManagment.columnModel.title0")); // NOI18N
        jTableImportManagment.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTableImportManagment.columnModel.title1")); // NOI18N

        jButton3.setFont(resourceMap.getFont("jButton3.font")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(resourceMap.getFont("jButton4.font")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelImportManagmentLayout = new javax.swing.GroupLayout(jPanelImportManagment);
        jPanelImportManagment.setLayout(jPanelImportManagmentLayout);
        jPanelImportManagmentLayout.setHorizontalGroup(
            jPanelImportManagmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImportManagmentLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelImportManagmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanelImportManagmentLayout.setVerticalGroup(
            jPanelImportManagmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelImportManagmentLayout.createSequentialGroup()
                .addContainerGap(194, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanelImportManagment.setBounds(10, 70, 510, 280);
        jLayeredPaneSettings.add(jPanelImportManagment, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanelConvert.setBackground(new java.awt.Color(250, 250, 250));
        jPanelConvert.setName("jPanelConvert"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jComboBoxEncoder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "duckboxAPI", "mencoder", "jepg2yuv+mpeg2enc" }));
        jComboBoxEncoder.setName("jComboBoxEncoder"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jComboBoxResolution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1024x576 25fps", "1280x720 60fps", "1920x1080 60fps" }));
        jComboBoxResolution.setName("jComboBoxResolution"); // NOI18N

        jComboBoxResize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "off", "internal" }));
        jComboBoxResize.setName("jComboBoxResize"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout jPanelConvertLayout = new javax.swing.GroupLayout(jPanelConvert);
        jPanelConvert.setLayout(jPanelConvertLayout);
        jPanelConvertLayout.setHorizontalGroup(
            jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConvertLayout.createSequentialGroup()
                .addGroup(jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConvertLayout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addGroup(jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBoxResize, javax.swing.GroupLayout.Alignment.LEADING, 0, 123, Short.MAX_VALUE)
                            .addComponent(jComboBoxEncoder, 0, 123, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConvertLayout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxResolution, 0, 123, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelConvertLayout.setVerticalGroup(
            jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConvertLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxEncoder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxResize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBoxResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(194, Short.MAX_VALUE))
        );

        jPanelConvert.setBounds(10, 70, 510, 280);
        jLayeredPaneSettings.add(jPanelConvert, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabelHeading.setBackground(resourceMap.getColor("jLabelHeading.background")); // NOI18N
        jLabelHeading.setFont(resourceMap.getFont("jLabelHeading.font")); // NOI18N
        jLabelHeading.setForeground(resourceMap.getColor("jLabelHeading.foreground")); // NOI18N
        jLabelHeading.setLabelFor(jLayeredPaneSettings);
        jLabelHeading.setText(resourceMap.getString("jLabelHeading.text")); // NOI18N
        jLabelHeading.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabelHeading.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabelHeading.setName("jLabelHeading"); // NOI18N
        jLabelHeading.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPaneTree, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelHeading, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(jLayeredPaneSettings, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(615, Short.MAX_VALUE)
                .addComponent(jSplitPaneApplyCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabelHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLayeredPaneSettings))
                    .addComponent(jSplitPaneTree, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPaneApplyCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        Object path[] = null;
        String heading = "";
        if(evt == null) {
            heading = "General";
        } else {
            path = jTree1.getSelectionPaths()[0].getPath();

            for(int i = 1; i < path.length; i++) {
                heading += ((DefaultMutableTreeNode)path[i]).getUserObject();

                if(i+1 < path.length)
                    heading += " : ";
            }
        }

        jLabelHeading.setText(heading);

        if(evt != null && (path.length == 1 /* TOP NODE SHOULD NEVER BE SELECTED */)) {

        } else if(evt == null || (path.length == 2 && ((DefaultMutableTreeNode)path[1]).getUserObject().equals("General"))) {
            showTabGeneral(eStatus.LOAD);

            showTabFileManagment(eStatus.HIDE);
            showTabImportManagment(eStatus.HIDE);

            showTabGeneral(eStatus.SHOW);

        } else if(path.length == 2 && ((DefaultMutableTreeNode)path[1]).getUserObject().equals("File Management")) {
            showTabFileManagment(eStatus.LOAD);

            showTabGeneral(eStatus.HIDE);
            showTabImportManagment(eStatus.HIDE);

            showTabFileManagment(eStatus.SHOW);

        } else if(path.length == 2 && ((DefaultMutableTreeNode)path[1]).getUserObject().equals("Movies")) {
            /* SELECT FIRST CHILD */
            TreeModel model = jTree1.getModel();
            TreePath oldTreePath = jTree1.getSelectionPaths()[0];
            TreeNode node = (TreeNode)oldTreePath.getLastPathComponent();
            int childCount = model.getChildCount(node);
            for (int i = 0; i < childCount; i++)
            {
               Object child = model.getChild(node, i);
               TreePath tp = (oldTreePath.pathByAddingChild(child));
               jTree1.setSelectionPath(tp);
            }

        } else if(path.length == 3 && ((DefaultMutableTreeNode)path[1]).getUserObject().equals("Movies") && ((DefaultMutableTreeNode)path[2]).getUserObject().equals("Import Management")) {
            showTabImportManagment(eStatus.LOAD);

            showTabGeneral(eStatus.HIDE);
            showTabFileManagment(eStatus.HIDE);

            showTabImportManagment(eStatus.SHOW);
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed
        
        showTabGeneral(eStatus.SAVE);
        showTabFileManagment(eStatus.SAVE);
        showTabImportManagment(eStatus.SAVE);

        setVisible(false);
    }//GEN-LAST:event_jButtonApplyActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void SettingShow(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_SettingShow
    }//GEN-LAST:event_SettingShow


    enum eStatus {SHOW, HIDE, SAVE, LOAD, UPDATE};

    private ArrayList<BoxInfo> mBoxInfos = null;
    private void showTabGeneral(eStatus status) {



        switch(status) {

            case SHOW:
                jPanelGeneral.setVisible(true);
                break;

            case HIDE:
                jPanelGeneral.setVisible(false);
                break;

            case UPDATE:
                if(mBoxInfos != null) {
                    jComboBoxBoxes.removeAllItems();
                    for (int i = 0; i < mBoxInfos.size(); i++) {
                        jComboBoxBoxes.addItem(mBoxInfos.get(i));
                    }

                    jTextFieldBoxesManufactor.setText(mBoxInfos.get(0).Manufactor);
                    jTextFieldBoxesModell.setText(mBoxInfos.get(0).Model);
                    jTextFieldBoxesIp.setText(mBoxInfos.get(0).IpAddress.getHostAddress());
                }
                break;

            case LOAD:
                jCheckBoxUpdate.setSelected(new valerie.tools.Properties().getPropertyBoolean("AUTO_UPDATE"));
                jCheckBoxLoadArchiv.setSelected(new valerie.tools.Properties().getPropertyBoolean("LOAD_ARCHIV"));

                jComboBoxBoxes.removeAllItems();
                if(mBoxInfos == null) {
                    BoxInfo[] boxInfos = (BoxInfo[])pController.get("BoxInfos");
                    if(boxInfos != null && boxInfos.length > 0) {
                        mBoxInfos = new ArrayList<BoxInfo>();
                        for(BoxInfo b : boxInfos)
                            mBoxInfos.add(b);
                    }
                }

                showTabGeneral(eStatus.UPDATE);

                //---

                for(ActionListener a : jButtonBoxesCreate.getActionListeners())
                    jButtonBoxesCreate.removeActionListener(a);

                jButtonBoxesCreate.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        if(mBoxInfos == null)
                            mBoxInfos = new ArrayList<BoxInfo>();
                        mBoxInfos.add(new BoxInfo());

                        jTextFieldBoxesManufactor.setEnabled(true);
                        jTextFieldBoxesModell.setEnabled(true);
                        jTextFieldBoxesIp.setEnabled(true);
                        jButtonBoxesSave.setEnabled(true);

                        showTabGeneral(eStatus.UPDATE);
                    }
                });

                for(ActionListener a : jButtonBoxesSave.getActionListeners())
                    jButtonBoxesSave.removeActionListener(a);

                jButtonBoxesSave.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {

                        boolean allowSave = true;

                        if(jTextFieldBoxesManufactor.getText().length() == 0)
                            allowSave = false;

                        if(jTextFieldBoxesModell.getText().length() == 0)
                            allowSave = false;

                        if(jTextFieldBoxesIp.getText().length() == 0)
                            allowSave = false;

                        InetAddress i = null;
                        if(allowSave) {
                            try {
                                i = InetAddress.getByName(jTextFieldBoxesIp.getText());
                                if(i == null)
                                    allowSave = false;
                            } catch(Exception ex) {
                                allowSave = false;
                            }
                        }

                        if(allowSave) {
                            BoxInfo b = (BoxInfo)jComboBoxBoxes.getSelectedItem();
                            b.Manufactor = jTextFieldBoxesManufactor.getText();
                            b.Model = jTextFieldBoxesModell.getText();
                            b.IpAddress = i;

                            jTextFieldBoxesManufactor.setEnabled(false);
                            jTextFieldBoxesModell.setEnabled(false);
                            jTextFieldBoxesIp.setEnabled(false);
                            jButtonBoxesSave.setEnabled(false);
                        }

                        showTabGeneral(eStatus.UPDATE);
                    }
                });

                //---

                for(ItemListener a : jComboBoxBoxes.getItemListeners())
                    jComboBoxBoxes.removeItemListener(a);

                jComboBoxBoxes.addItemListener(new ItemListener() {
                    public void itemStateChanged(ItemEvent e) {
                        BoxInfo b = (BoxInfo)e.getItem();
                        /*jTextFieldBoxesManufactor.setEnabled(true);
                        jTextFieldBoxesModell.setEnabled(true);
                        jTextFieldBoxesIp.setEnabled(true);*/

                        jTextFieldBoxesManufactor.setText(b.Manufactor);
                        jTextFieldBoxesModell.setText(b.Model);
                        jTextFieldBoxesIp.setText(b.IpAddress.getHostAddress());
                    }
                });

                break;

            case SAVE:
                valerie.tools.Properties prop = new valerie.tools.Properties();
                prop.setProperty("AUTO_UPDATE", jCheckBoxUpdate.isSelected());
                prop.setProperty("LOAD_ARCHIV", jCheckBoxLoadArchiv.isSelected());

                String save = "";
                for(BoxInfo b : mBoxInfos)
                    save += b.toInternalString() + "|";

                prop.setProperty("IPADDR", save);

                prop.save();

                pController.networkConnect();

                break;
        }
    }

    private void showTabFileManagment(eStatus status) {

        switch(status) {

            case SHOW:
                jPanelFileManagment.setVisible(true);
                break;

            case HIDE:
                jPanelFileManagment.setVisible(false);
                break;

            case LOAD:
                jTextFieldFilter.setText(((ConfPaths)pController.get("ConfPaths")).getFilter());
                break;

            case SAVE:
                ((ConfPaths)pController.get("ConfPaths")).setFilter(jTextFieldFilter.getText());
                ((ConfPaths)pController.get("ConfPaths")).save();
                break;
        }
    }

    private LinkedList<Path> WorkPathMovies = null;
    private void showTabImportManagment(eStatus status) {

        switch(status) {

            case SHOW:
                jPanelImportManagment.setVisible(true);
                break;

            case HIDE:
                jPanelImportManagment.setVisible(false);
                break;

            case UPDATE:
                //jTableImportManagment.removeAll();
                ((DefaultTableModel) jTableImportManagment.getModel()).setRowCount(WorkPathMovies.size());
                int iteratorMovies = 0;
                for(Path pathMovies : WorkPathMovies) {
                    
                    jTableImportManagment.setValueAt(pathMovies.path, iteratorMovies, 0);
                    jTableImportManagment.setValueAt(pathMovies.type, iteratorMovies, 1);
                    
                    iteratorMovies++;
                }
jTableImportManagment.repaint();
                jTableImportManagment.invalidate();
                break;

            case LOAD:
                if(WorkPathMovies == null) {
                    WorkPathMovies = new LinkedList<Path>();
                    Path[] paths = ((ConfPaths)pController.get("ConfPaths")).getPaths();
                    WorkPathMovies.clear();
                    for(Path path : paths)
                        if(path != null && path.path.length() > 0)
                            WorkPathMovies.add(path);
                }

                showTabImportManagment(eStatus.UPDATE);

                //---

                for(ActionListener a : jButton3.getActionListeners())
                    jButton3.removeActionListener(a);

                jButton3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        if(jTableImportManagment.getRowCount() > 0) {
                            String pathToDelete = jTableImportManagment.getValueAt(jTableImportManagment.getSelectedRow(), jTableImportManagment.getSelectedColumn()).toString();
                            for(Path p : WorkPathMovies) {
                                if(pathToDelete.equals(p.path)) {
                                    WorkPathMovies.remove(p);
                                    break;
                                }
                            }
                            
                            showTabImportManagment(eStatus.UPDATE);
                        }
                        
                    }
                });

                for(ActionListener a : jButton4.getActionListeners())
                    jButton4.removeActionListener(a);

                jButton4.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        String pathToAdd = JOptionPane.showInputDialog("New Directory:");
                        if(pathToAdd != null && pathToAdd.length() > 0) {
                            boolean found = false;
                            for(Path p : WorkPathMovies) {
                                if(pathToAdd.startsWith(p.path)) {
                                    found = true;
                                    break;
                                }
                            }
                            if(!found)
                                WorkPathMovies.add(new Path(pathToAdd));

                            showTabImportManagment(eStatus.UPDATE);
                        }
                    }
                });

                //---

                jTableImportManagment.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        WorkPathMovies.clear();
                        int rowc = jTableImportManagment.getRowCount();
                        for(int i = 0; i < rowc; i++) {
                            String path = "";
                            path += jTableImportManagment.getModel().getValueAt(i, 0).toString();
                            path += "|";
                            path += jTableImportManagment.getModel().getValueAt(i, 1).toString();
                            WorkPathMovies.add(new Path(path));
                        }

                        showTabImportManagment(eStatus.UPDATE);
                    }
                });


                //---

                // These are the combobox values
                Object[] values = eContains.values();//new String[]{"item1", "item2", "item3"};

                // Set the combobox editor on the 1st visible column
                int vColIndex = 1;
                TableColumn col = jTableImportManagment.getColumnModel().getColumn(vColIndex);
                col.setCellEditor(new MyComboBoxEditor(values));

                // If the cell should appear like a combobox in its
                // non-editing state, also set the combobox renderer
                col.setCellRenderer(new MyComboBoxRenderer(values));


                break;

            case SAVE:

                jTableImportManagment.getSelectionModel().addSelectionInterval(0,
                        jTableImportManagment.getRowCount());

                if(WorkPathMovies != null) {
                    ((ConfPaths)pController.get("ConfPaths")).setPaths(WorkPathMovies.toArray(new Path[1]));
                    ((ConfPaths)pController.get("ConfPaths")).save();
                }
                break;
        }
    }

    public class MyComboBoxRenderer extends JComboBox implements TableCellRenderer {
        public MyComboBoxRenderer(Object[] items) {
            super(items);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                super.setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }

            // Select the current value
            setSelectedItem(value);
            return this;
        }
    }

    public class MyComboBoxEditor extends DefaultCellEditor {
        public MyComboBoxEditor(Object[] items) {
            super(new JComboBox(items));
        }
    }

    private void jButtonBoxesCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBoxesCreateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBoxesCreateActionPerformed

    private void jButtonBoxesSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBoxesSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBoxesSearchActionPerformed

    private void jButtonBoxesSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBoxesSaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBoxesSaveActionPerformed

    private void jComboBoxBoxesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxBoxesItemStateChanged
        // TODO add your handling code here:
    }

    @Action
    public Task ActionSearchForBoxes() {
        return new ActionSearchForBoxesTask(org.jdesktop.application.Application.getInstance(valerie.ValerieApp.class));
    }//GEN-LAST:event_jComboBoxBoxesItemStateChanged

    private class ActionSearchForBoxesTask extends org.jdesktop.application.Task<Object, Void> {
        ActionSearchForBoxesTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to ActionSearchForBoxesTask fields, here.
            super(app);

            this.setUserCanCancel(false);

            pController.add(new Notification() {
                @Override
                public void init() {
                    Type = "PROGRESS";
                }

                @Override
                public void callback(Object o) {
                    if(o.getClass().equals(Float.class))
                        setProgress((Float)o);
                    else if(o.getClass().equals(String.class))
                        setMessage((String)o);
                }
            });
        }
        
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.

             pController.networkConnect();

            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().

            showTabGeneral(eStatus.LOAD);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonApply;
    private javax.swing.JButton jButtonBoxesCreate;
    private javax.swing.JButton jButtonBoxesSave;
    private javax.swing.JButton jButtonBoxesSearch;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JCheckBox jCheckBoxLoadArchiv;
    private javax.swing.JCheckBox jCheckBoxUpdate;
    private javax.swing.JComboBox jComboBoxBoxes;
    private javax.swing.JComboBox jComboBoxEncoder;
    private javax.swing.JComboBox jComboBoxResize;
    private javax.swing.JComboBox jComboBoxResolution;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelFilter;
    private javax.swing.JLabel jLabelHeading;
    private javax.swing.JLayeredPane jLayeredPaneSettings;
    private javax.swing.JPanel jPanelConvert;
    private javax.swing.JPanel jPanelFileManagment;
    private javax.swing.JPanel jPanelGeneral;
    private javax.swing.JPanel jPanelImportManagment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPaneApplyCancel;
    private javax.swing.JSplitPane jSplitPaneTree;
    private javax.swing.JTable jTableImportManagment;
    private javax.swing.JTextField jTextFieldBoxesIp;
    private javax.swing.JTextField jTextFieldBoxesManufactor;
    private javax.swing.JTextField jTextFieldBoxesModell;
    private javax.swing.JTextField jTextFieldFilter;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    
}
